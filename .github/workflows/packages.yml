name: Build packages

on:
  workflow_dispatch:
  schedule:
    - cron: '28 7 * * sun'

jobs:

  sdist:  # {{{
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - {package: psycopg, format: sdist, impl: python}
          - {package: psycopg, format: wheel, impl: python}
          - {package: psycopg_c, format: sdist, impl: c}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Create the sdist packages
        run: |-
          python ${{ matrix.package }}/setup.py sdist -d `pwd`/dist/
        if: ${{ matrix.format == 'sdist' }}

      - name: Create the wheel packages
        run: |-
          pip install wheel
          python ${{ matrix.package }}/setup.py bdist_wheel -d `pwd`/dist/
        if: ${{ matrix.format == 'wheel' }}

      - name: Install the Python package and test requirements
        run: |-
          pip install `ls dist/*`[test]
          pip install -e ./psycopg_pool
        if: ${{ matrix.package == 'psycopg' }}

      - name: Install the C package and test requirements
        run: |-
          pip install dist/*
          pip install -e ./psycopg[test]
          pip install -e ./psycopg_pool
        if: ${{ matrix.package == 'psycopg_c' }}

      - name: Test the sdist package
        run: pytest -m 'not slow' --color yes
        env:
          PSYCOPG_IMPL: ${{ matrix.impl }}
          PSYCOPG_TEST_DSN: "host=127.0.0.1 user=postgres"
          PGPASSWORD: password

      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*

    services:
      postgresql:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  # }}}

  linux:  # {{{
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686, ppc64le, aarch64]
        pyver: [cp37, cp38, cp39, cp310]
        platform: [manylinux, musllinux]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU for multi-arch build
        uses: docker/setup-qemu-action@v1

      - name: Create the binary package source tree
        run: python3 ./tools/build/copy_to_binary.py

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        with:
          package-dir: psycopg_binary
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_24
          CIBW_BUILD: ${{matrix.pyver}}-${{matrix.platform}}_${{matrix.arch}}
          CIBW_ARCHS_LINUX: auto aarch64 ppc64le
          CIBW_BEFORE_ALL_LINUX: ./tools/build/wheel_linux_before_all.sh
          CIBW_REPAIR_WHEEL_COMMAND: >-
            ./tools/build/strip_wheel.sh {wheel}
            && auditwheel repair -w {dest_dir} {wheel}
          CIBW_TEST_REQUIRES: ./psycopg[test] ./psycopg_pool
          CIBW_TEST_COMMAND: pytest {project}/tests -m 'not slow' --color yes
          CIBW_ENVIRONMENT: >-
            PSYCOPG_IMPL=binary
            PSYCOPG_TEST_DSN='host=172.17.0.1 user=postgres'
            PGPASSWORD=password

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

    services:
      postgresql:
        # Can update to 14 only after aarch64 will be able to build with libpq
        # > 10 or if we reconfigure the server to use md5 instead of SCRAM
        # authentication.
        image: postgres:13
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  # }}}

  macos:  # {{{
    runs-on: macos-10.15

    strategy:
      fail-fast: false
      matrix:
        # These archs require an Apple M1 runner: [arm64, universal2]
        arch: [x86_64]
        pyver: [cp37, cp38, cp39, cp310]

    steps:
      - uses: actions/checkout@v2

      - name: Create the binary package source tree
        run: python3 ./tools/build/copy_to_binary.py

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        with:
          package-dir: psycopg_binary
        env:
          CIBW_BUILD: ${{matrix.pyver}}-macosx_${{matrix.arch}}
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2
          CIBW_BEFORE_ALL_MACOS: ./tools/build/wheel_macos_before_all.sh
          CIBW_TEST_REQUIRES: ./psycopg[test] ./psycopg_pool
          CIBW_TEST_COMMAND: pytest {project}/tests -m 'not slow' --color yes
          CIBW_ENVIRONMENT: >-
            PSYCOPG_IMPL=binary
            PSYCOPG_TEST_DSN='dbname=postgres'

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl


  # }}}

  windows:  # {{{
    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        # Might want to add win32, untested at the moment.
        arch: [win_amd64]
        pyver: [cp37, cp38, cp39, cp310]

    steps:
      - uses: actions/checkout@v2

      - name: Start PostgreSQL service for test
        run: |
          $PgSvc = Get-Service "postgresql*"
          Set-Service $PgSvc.Name -StartupType manual
          $PgSvc.Start()

      - name: Create the binary package source tree
        run: python3 ./tools/build/copy_to_binary.py

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        with:
          package-dir: psycopg_binary
        env:
          CIBW_BUILD: ${{matrix.pyver}}-${{matrix.arch}}
          CIBW_ARCHS_WINDOWS: AMD64 x86
          CIBW_BEFORE_BUILD_WINDOWS: '.\tools\build\wheel_win32_before_build.bat'
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
            delvewheel repair -w {dest_dir}
            --no-mangle "libiconv-2.dll;libwinpthread-1.dll" {wheel}
          CIBW_TEST_REQUIRES: ./psycopg[test] ./psycopg_pool
          CIBW_TEST_COMMAND: pytest {project}/tests -m "not slow" --color yes
          CIBW_ENVIRONMENT_WINDOWS: >-
            PSYCOPG_IMPL=binary
            PATH="C:\\Program Files\\PostgreSQL\\14\\bin;$PATH"
            PSYCOPG_TEST_DSN="host=127.0.0.1 user=postgres"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl


  # }}}
